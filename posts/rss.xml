<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title> =^..^= MEH (Posts)</title><link>https://chow1026.github.io/</link><description></description><atom:link href="https://chow1026.github.io/posts/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 18 Aug 2017 06:50:34 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Back to Anaconda</title><link>https://chow1026.github.io/posts/back-to-anaconda/</link><dc:creator>cHoWy</dc:creator><description>&lt;div&gt;&lt;p&gt;It was last year that I first heard of Anaconda, iPython (currently known as Jupyter) Notebook, etc... It didn't make sense to me back then, mind you it is a mighty and powerful platform.  I felt a bit overwhelmed then.  But today as I revisit the &lt;a href="https://www.continuum.io/"&gt;Anaconda&lt;/a&gt; website and &lt;a href="http://jupyter.readthedocs.io/en/latest/"&gt;Jupyter&lt;/a&gt; (formerly iPython) website, reading the documents again, it sort of makes sense now.  &lt;/p&gt;
&lt;p&gt;What prompted me to revisit Anaconda, and Jupyter Notebook?  I am kind of looking for a "one tool does all" environment for data science project that accommodate the use of python and R.  I have been using homebrew with pip, virtualenv, virtualenvwrapper to manage development environment and packages for python projects; and RStudio for R projects.  It is sort of redundant to set up different environments, use different package manager and learn two different tools to do any kind of data science work at all.&lt;/p&gt;
&lt;p&gt;So here we are.  The set up for Anaconda is pretty straight forward and there are tons of documentations out there.  Here is a simplified short list of steps:
1. Go to &lt;a href="https://www.continuum.io/downloads"&gt;Download&lt;/a&gt; page on &lt;a href="https://www.continuum.io/"&gt;Anaconda&lt;/a&gt; home page.
2. Choose the download that is suitable for your platform:  &lt;br&gt;
3. Install by double clicking the installer package, or type &lt;code&gt;bash AnacondaX.Y.Z-XXX.sh&lt;/code&gt; if you downloaded the bash installer script instead.&lt;br&gt;
4. Once installation is completed, we could move on to using the terminal/bash. Type in &lt;code&gt;conda update conda&lt;/code&gt; and &lt;code&gt;conda update anaconda&lt;/code&gt; to make sure packages at root are up-to-date.&lt;br&gt;
5. Sometimes packages or library that comes with anaconda might be out of date, you can update by &lt;code&gt;conda update scikit-learn&lt;/code&gt; or &lt;code&gt;conda install -c anaconda scikit-learn=X.XX.X&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;One thing I noticed was the project-env hook that virtualenvwrapper offers.  When I typed &lt;code&gt;workon XXXenv&lt;/code&gt;, the virtual environment of XXX will be activated, and I was also redirected to the project directory.  This is convenient, if we have 1-to-1 match of project and virtualenv setups, which was mostly the case for me.  Note that this is not a fixed/default setup, I just happened to like it this way.  &lt;/p&gt;
&lt;p&gt;I guess the advantage of anaconda is one could set up an environment once and share it across projects that uses similar libraries or packages.  &lt;/p&gt;
&lt;p&gt;TODO: Explore anaconda-project.  &lt;/p&gt;&lt;/div&gt;</description><guid>https://chow1026.github.io/posts/back-to-anaconda/</guid><pubDate>Tue, 15 Aug 2017 02:20:58 GMT</pubDate></item><item><title>dyld: Library Not Loaded: @executable_path/../.Python</title><link>https://chow1026.github.io/posts/python-library-not-loaded/</link><dc:creator>cHoWy</dc:creator><description>&lt;div&gt;&lt;p&gt;I have always been a fan of virtualenv and virtualenvwrapper.  It is nice to be able to isolate development environments for each of my python projects.  &lt;/p&gt;
&lt;p&gt;However some of the projects I work on aren't python projects.  It could be R, it could be iPython Jupyter notebook.   That means I could be away from meddling with any of the python virtual environments for a while.  And if I 'accidentally' updated my native python version on my MacOS machine, I would see the error as such "dyld: Library Not Loaded: @executable_path/../.Python".  &lt;/p&gt;
&lt;p&gt;After googling around, the solutions out there are either to start from scratch and recreate a new virtual environments or to go through the some steps to recreate the links from the virtual environments to the new version and paths of python.  &lt;/p&gt;
&lt;p&gt;I tried both ways, and I really can't tell which is easier.  Ultimately, after recreating the links or recreate a project, one will still have to re-install all the packages needed for the project.  I would love the ability to freeze requirements into a requirements.txt, but even that will require a working python virtualenv and pip.  Typical chicken and egg problem.  &lt;/p&gt;
&lt;p&gt;Anyway, for the sake of future reference, I thought it would be good to type out all the command lines to recreate the links:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;python virtualenv folder&lt;span class="o"&gt;}&lt;/span&gt;
$ find &lt;span class="o"&gt;{&lt;/span&gt;broken virtualenv&lt;span class="o"&gt;}&lt;/span&gt;/ -type l         &lt;span class="c1"&gt;## to list out all the links&lt;/span&gt;
$ deactivate &lt;span class="c1"&gt;## Optional, deactivate if virtualenv is active&lt;/span&gt;
$ find &lt;span class="o"&gt;{&lt;/span&gt;broken virtualenv&lt;span class="o"&gt;}&lt;/span&gt;/ -type l -delete &lt;span class="c1"&gt;## to delete the broken links&lt;/span&gt;
$ virtualenv &lt;span class="o"&gt;{&lt;/span&gt;broken virtualenv&lt;span class="o"&gt;}&lt;/span&gt; --python&lt;span class="o"&gt;=&lt;/span&gt;python3   &lt;span class="c1"&gt;## recreate links to OS's python&lt;/span&gt;
$ workon &lt;span class="o"&gt;{&lt;/span&gt;broken virtualenv&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;## activate and workon the fixed virtualenv&lt;/span&gt;
$ pip3 install  ... &lt;span class="o"&gt;{&lt;/span&gt;other packages required &lt;span class="k"&gt;for&lt;/span&gt; the project&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;All that said, &lt;strong&gt;NOTE TO SELF&lt;/strong&gt;:&lt;/p&gt;
&lt;h4&gt;REMEMBER TO PIP FREEZE REQUIREMENTS.TXT BEFORE UPGRADING SYSTEM'S PYTHON.&lt;/h4&gt;
&lt;p&gt;PS: For Nikola, to rebuild site after the virtualenv fix, Nikola Static site builder somehow failed.  Error message was "dbm.error: db type is dbm.gnu, but the module is not available".  After some googling around, I found out we need to clear cache and previously built .db file type &lt;code&gt;nikola clean&lt;/code&gt; and &lt;code&gt;nikola forget&lt;/code&gt;.  Then run &lt;code&gt;nikola auto -b&lt;/code&gt; to build a new build. &lt;/p&gt;&lt;/div&gt;</description><guid>https://chow1026.github.io/posts/python-library-not-loaded/</guid><pubDate>Mon, 07 Aug 2017 08:39:43 GMT</pubDate></item><item><title>Visualization with Tableau</title><link>https://chow1026.github.io/posts/tableau/</link><dc:creator>cHoWy</dc:creator><description>&lt;div&gt;&lt;p&gt;Since Udacity changed the Data Visualization course module in the DAND program (they have chosen to partner with Tableau), I was given the options to finish my last project (the data visualization project) either with D3 (old syllabus) or with Tableau (new syllabus).  &lt;/p&gt;
&lt;p&gt;Thinking that Tableau was just a software, and given the fact I hadn't had great experience with Javascript programming even back in my frontend days, I decided to switch to the new module and give Tableau a try.  &lt;/p&gt;
&lt;p&gt;However I soon learn that it is quite a terrible mistake.  First off, the new Visualization with Tableau tutorial was awful.  It barely covers the essence of visualization designs.  The parts that it is supposed to demonstrate Tableau features, it is not even half as good or thorough as the tutorials on Tableau website itself.  It is rather apparent that Udacity launched this switch without having the course fully ready.  &lt;/p&gt;
&lt;p&gt;Even with the tutorials on Tableau website, Tableau desktop hasn't proven itself to be the best software.  There are lots of non self-explanatory error messages such as "Your connection has probably timed out.  Try to reconnect to Tableau Server.  "  or "Internal Error - An unexpected error has occurred and the operations could not be completed.  ".  It took a fair bit of puddling around, trial and errors, and observations, that I finally figured out what those messages mean, and how to work around it by logging out of the previous session, and re-logging back in to create a new session.  Note that this is really merely a workaround.  It is NOT a real solution as it wastes so much time to log out and log in while you work on a project.&lt;/p&gt;
&lt;p&gt;Another disappointment was that all the students on Data Analyst Nanodegree programme who agreed to the switch found out that we are not given the student license of Tableau, but those license was available for those who are on Frontend developer project.  Without the license, we are only allowed certain size of datasets.  The limit was somewhat around 15,000,000.  This is truly frustrating as I had all the ideas in mind on how to analysis the data and what kind of storyboard I wanted to create, only to find out later I can't tell the story I want.  &lt;/p&gt;
&lt;p&gt;This makes me feel highly dissatisfied with Udacity at the last couple months of my program.  I feel this is a very dishonest conduct of business, by launching something that's so far from ready.  Because of the lack of structural support and guidance for the last course, and license limitation with Tableau, I was at least delayed a month from graduation.  For someone who is paying the course with her own out-of-pocket money, this is just absurd.  Now will I be able to get refund for last month's subscription fees?  I doubt it ...... &lt;/p&gt;&lt;/div&gt;</description><guid>https://chow1026.github.io/posts/tableau/</guid><pubDate>Sat, 29 Jul 2017 06:45:47 GMT</pubDate></item><item><title>Setting Up Multiple GitHub User Account on One Machine</title><link>https://chow1026.github.io/posts/multiple-github-accounts/</link><dc:creator>cHoWy</dc:creator><description>&lt;div&gt;&lt;p&gt;It is not unusual that developers need multiple github accounts on a single machine.  I was looking through the resources on the internet and found &lt;a href="https://gist.github.com/jexchan/2351996/"&gt;this&lt;/a&gt; the most useful.  None the less, I decided to write a post about this, just so for my own references.  &lt;/p&gt;
&lt;p&gt;Here are the steps:
- Create the users (however many you need) on &lt;a href="https://github.com/"&gt;github&lt;/a&gt; first.     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;ssh-keygen&lt;/code&gt; to generate various ssh keys.  When prompted, make sure the keys are named appropriately so they can be identified easily.     &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;ssh-keygen -t rsa -C "{email1@youremail1.com}"
ssh-keygen -t rsa -C "{email1@youremail1.com}"
&lt;/pre&gt;


&lt;p&gt;Make sure emails used are the ones you used for creating the github accounts.    &lt;/p&gt;
&lt;p&gt;Usually ssh keys are stored under &lt;code&gt;home/{username}/.ssh&lt;/code&gt; folder (or &lt;code&gt;/Users/{username}/.ssh&lt;/code&gt; if you are on mac).  For example, the following keys are generated:    &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;~/.ssh/id_rsa_{git_username1}
~/.ssh/id_rsa_{git_username2}
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;Add the keys to SSH to the SSH Agent on the system:     &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;ssh-add ~/.ssh/id_rsa_{git_username1}
ssh-add ~/.ssh/id_rsa_{git_username2}
&lt;/pre&gt;


&lt;p&gt;To delete ALL previously added keys:    &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;ssh-add -D
&lt;/pre&gt;


&lt;p&gt;To delete a previously added key:    &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;ssh-add -d {id_rsa_keyname}
&lt;/pre&gt;


&lt;p&gt;To list ALL previously added keys:    &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;ssh-add -l
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;The public keys need to be added to the github accounts accordingly.  &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;pbcopy &amp;lt; ~/.ssh/id_rsa_{git_username1}.pub
&lt;/pre&gt;


&lt;p&gt;Paste the content to corresponding &lt;a href="https://github.com/settings/keys"&gt;github SSH key management&lt;/a&gt;.   &lt;br&gt;
Repeat for all other keys for other accounts.     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Configure SSH config&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;cd ~/.ssh/
nano config
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;Add the following lines, modify accordingly:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;# github_{user1} account
Host github.com-{user1}
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa_{git_username1}
    IdentitiesOnly yes

# github_{user2} account
Host github.com-{user2}
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa_{git_username2}
    IdentitiesOnly yes
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;Manage Global Git Configs.  You may either define those in command line or store them in a .gitconfig_global under     &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[core]&lt;/span&gt;
       &lt;span class="na"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;atom -n -w&lt;/span&gt;
&lt;span class="s"&gt;       excludesfile = {filepath}/.gitignore_global&lt;/span&gt;
&lt;span class="k"&gt;[push]&lt;/span&gt;
       &lt;span class="na"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;upstream&lt;/span&gt;
&lt;span class="k"&gt;[merge]&lt;/span&gt;
       &lt;span class="na"&gt;conflictstyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;diff3&lt;/span&gt;
&lt;span class="k"&gt;[color]&lt;/span&gt;
       &lt;span class="na"&gt;ui&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;[user]&lt;/span&gt;
       &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;{leave null, define this locally}&lt;/span&gt;
&lt;span class="s"&gt;       email = {leave null, define this locally}&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;Manage Local Git Configs  &lt;br&gt;
For example, github user1&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[user]&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;{github_username1}&lt;/span&gt;
&lt;span class="s"&gt;        email = {github_email1}&lt;/span&gt;
&lt;span class="k"&gt;[remote "origin"]&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;git@github.com-{user1}:{github_username}/{github_repo}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Note that the host in URL has to be the right host defined earlier in the &lt;code&gt;~/.ssh/config&lt;/code&gt; file.   &lt;/p&gt;
&lt;p&gt;The same precaution has to be taken when cloning.  ie when executing &lt;code&gt;git clone&lt;/code&gt; command, make sure the git host in 'copied and pasted' repo url is edited accordingly to the right user/host.  &lt;/p&gt;&lt;/div&gt;</description><guid>https://chow1026.github.io/posts/multiple-github-accounts/</guid><pubDate>Tue, 15 Nov 2016 04:39:45 GMT</pubDate></item><item><title>Matplotlib on OSX with VirtualEnv/VirtualEnvWrapper (and Pip)</title><link>https://chow1026.github.io/posts/matplotlib-on-osx-virtualenv/</link><dc:creator>cHoWy</dc:creator><description>&lt;div&gt;&lt;p&gt;I like keeping my mini projects separate, mostly under its own virtual environment set up.  I use &lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;VirtualEnv&lt;/a&gt; and &lt;a href="https://virtualenvwrapper.readthedocs.io/en/latest/"&gt;VirtualEnvWrapper&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;As I am working on code for data analysis and data visualization, inevitably I need the matplotlib library.  Reading various resources online, I managed to get it to work.  And with this post, I hope to document the steps for future reference.  &lt;/p&gt;
&lt;p&gt;My environments:    &lt;br&gt;
- MacBookPro, OS macOS Sierra (10.12.1)   &lt;br&gt;
- VirtualEnv v.15.0.3   &lt;br&gt;
- python v.3.5.1  &lt;br&gt;
- Pip v.9.0.1    &lt;/p&gt;
&lt;p&gt;Steps:  &lt;br&gt;
1. Activate the virtual environment: &lt;code&gt;workon {env}&lt;/code&gt;  &lt;br&gt;
2. Show pip packages: &lt;code&gt;pip3 list&lt;/code&gt;  &lt;br&gt;
3. Install necessary packages for data analysis and plotting: &lt;code&gt;pip install numpy scipy matplotlib pandas sympy nose&lt;/code&gt;  &lt;br&gt;
4. Install PyQt5: &lt;code&gt;pip install PyQt5&lt;/code&gt;   &lt;br&gt;
5. Modify matplotlibrc file: &lt;code&gt;nano {path to env}/lib/{pythonX.X}/site-packages/matplotlib/mpl-data/matplotlibrc&lt;/code&gt;   &lt;br&gt;
      - At the  top of the configurations, define backend: &lt;code&gt;backend    :   Qt5Agg&lt;/code&gt;  &lt;br&gt;
      - Then, define backend binding: &lt;code&gt;backend.qt5    :    PyQt5&lt;/code&gt;  &lt;br&gt;
      - Save file.   &lt;/p&gt;
&lt;p&gt;You are all set now.&lt;/p&gt;&lt;/div&gt;</description><category>Matplotlib</category><category>OSX</category><category>VirtualEnv</category><category>VirtualEnvWrapper</category><guid>https://chow1026.github.io/posts/matplotlib-on-osx-virtualenv/</guid><pubDate>Mon, 14 Nov 2016 06:17:26 GMT</pubDate></item><item><title>Setting Up Nikola, a Static Site Generator</title><link>https://chow1026.github.io/posts/nikola-setup/</link><dc:creator>cHoWy</dc:creator><description>&lt;div&gt;&lt;p&gt;A while back, I started to look into static site generators for building my professional and personal blog site.  I had used &lt;a href="https://wordpress.org/" title="Wordpress"&gt;Wordpress&lt;/a&gt; long ago, but want to practice programming in Python.  Recently I tried out &lt;a href="https://medium.com/" title="Medium"&gt;Medium&lt;/a&gt;, but find it rather limiting when it comes to formatting content, and to organizing my posts.   &lt;/p&gt;
&lt;p&gt;I want to use the opportunity to explore what's new out there and get my hands dirty in programming again.  While researching, I stumble upon this site for static site generator - &lt;a href="https://www.staticgen.com/" title="StaticGen"&gt;StaticGen&lt;/a&gt;.  After testing out briefly with Pelican and Nikola, At last I decided to go with &lt;a href="https://getnikola.com/" title="Nikola"&gt;Nikola&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Nikola is rather lightweight, written with Python, supports contents written in markdown (my preferred way of writing content), and supports &lt;a href="https://www.mathjax.org/" title="MathJax"&gt;MathJax&lt;/a&gt; with a little tweaking.&lt;/p&gt;
&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;The initial installation is rather basic.  First I install Nikola using pip.  Note that I install the extras as well, so I don't have to worry about them later.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ pip install --upgrade &lt;span class="s2"&gt;"Nikola[extras]"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Then, I created a virtual environment and a project for this using  &lt;a href="https://virtualenv.pypa.io/en/stable/" title="Python VirtualEnv"&gt;&lt;code&gt;virtualevn&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://virtualenvwrapper.readthedocs.io/en/latest/" title="Python VirtualEnvWrapper"&gt;&lt;code&gt;virtualevnwrapper&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ mkproject -p /usr/local/bin/python3 nikola
$ workon nikola
&lt;/pre&gt;


&lt;p&gt;Then I was able to initialize a Nikola site.  &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola init &lt;span class="o"&gt;{&lt;/span&gt;site_name&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Voila! We have a site!  Nikola has neat built-in commands. Check them out with &lt;code&gt;nikola help&lt;/code&gt;.  For example, to create a new post, use the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola new_post &lt;span class="o"&gt;{&lt;/span&gt;post_name&lt;span class="o"&gt;}&lt;/span&gt;.md
&lt;/pre&gt;


&lt;p&gt;I like to keep the nikola server running as I go through the edit/preview cycles, I typed&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola auto -b
&lt;/pre&gt;


&lt;h4&gt;Configurations&lt;/h4&gt;
&lt;p&gt;I used most of the default settings in the &lt;code&gt;config.py&lt;/code&gt;, except for the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;# Category Settings #
CATEGORY_PATH = "categories"
CATEGORY_PREFIX = ""
CATEGORY_ALLOW_HIERARCHIES = True
CATEGORY_OUTPUT_FLAT_HIERARCHY = False
CATEGORY_PAGES_ARE_INDEXES = False

# Author Page #
ENABLE_AUTHOR_PAGES = False

# Archives Settings #
CREATE_MONTHLY_ARCHIVE = True
CREATE_DAILY_ARCHIVE = True
ARCHIVE_PATH = "archives"
ARCHIVE_FILENAME = "archives.html"

# FavIcons #
FAVICONS = (
    ("icon", "{path to favicon}", "64x64"),
    ("icon", "{path to favicon}", "512x512"),
)

# Hide Source Link #
SHOW_SOURCELINK = False
&lt;/pre&gt;


&lt;h4&gt;Organizing Content&lt;/h4&gt;
&lt;p&gt;Instead the built-in Category and Tag features, I am not quite satisfied with the way it organizes my content.  I prefer to organize my content a certain way.  So, in the &lt;code&gt;config.py&lt;/code&gt;, I made the following settings:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;POSTS = (
    ("posts/*.md", "posts", "post.tmpl"),
    ("course-notes/*.md", "course-notes", "post.tmpl"),
    ("links/*.md", "links", "post.tmpl"),
    ("books/*.md", "books", "post.tmpl"),
    ("movies-shows/*.md", "movies-shows", "post.tmpl"),
    ("music/*.md", "music", "post.tmpl"),
)
PAGES = (
    ("pages/*.md", "pages", "story.tmpl"),
)
&lt;/pre&gt;


&lt;p&gt;Although Nikola offers two content types - post and page, I figure I only use the post type (for now at least).  I am simply keeping &lt;code&gt;PAGES&lt;/code&gt; as is.   &lt;/p&gt;
&lt;p&gt;To add the corresponding content type to the navigation links,&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;NAVIGATION_LINKS = {
    DEFAULT_LANG: (
        ("/posts/index.html", "Articles"),
        ("/course-notes/index.html", "Course Notes"),
        ("/links/index.html", "Links"),
        ("/books/index.html", "Books"),
        ("/archives/archives.html", "Archives"),
        ("/tags.html", "Tags"),
    ),
}
&lt;/pre&gt;


&lt;h4&gt;Themes&lt;/h4&gt;
&lt;p&gt;Nikola's theme repo doesn't offer too extensive a choice. So I decided to make my own by following this very nicely written guide in &lt;a href="http://nikola.readthedocs.io/en/latest/creating-a-theme/" title="Creating a Nikola Theme"&gt;creating your own theme&lt;/a&gt;.  You may find &lt;a href="https://github.com/chowy1026/nikola-themes/tree/hyde/v7/hyde" title="Nikola Theme - Hyde"&gt;my theme here&lt;/a&gt;.  &lt;/p&gt;
&lt;h4&gt;Enabling MathJax&lt;/h4&gt;
&lt;p&gt;The steps to enable MathJax in Nikola are easy. First, add the following line to &lt;code&gt;templates\base_helper.tmpl&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;link rel="stylesheet" href="http://fonts.googleapis.com/css?family=PT+Sans:400,400italic,700|Abril+Fatface"&amp;gt;
&lt;/pre&gt;


&lt;p&gt;Then add&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;MATHJAX_CONFIG = """
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/x-mathjax-config"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        MathJax.Hub.Config({
            tex2jax: {
                inlineMath: [ ['$','$'], ["\\\(","\\\)"] ],
                displayMath: [ ['$$','$$'], ["\\\[","\\\]"] ],
                processEscapes: true
            },
            displayAlign: 'left', // Change this to 'center' to center equations.
            "HTML-CSS": {
                styles: {'.MathJax_Display': {"margin": 0}}
            }
        });
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/x-mathjax-config"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  MathJax.Hub.Queue(function() {
    // Fix &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt; tags after MathJax finishes running. This is a
    // hack to overcome a shortcoming of Markdown. Discussion at
    // https://github.com/mojombo/jekyll/issues/199
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &lt;span class="nt"&gt;&amp;lt; all.length&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="err"&gt;i&lt;/span&gt; &lt;span class="err"&gt;+=&lt;/span&gt; &lt;span class="err"&gt;1)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;all[i].SourceElement().parentNode.className&lt;/span&gt; &lt;span class="err"&gt;+=&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="err"&gt;has-jax';&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;});&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;/script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    """
&lt;/pre&gt;


&lt;p&gt;and this&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;HIDDEN_TAGS = ['mathjax']
&lt;/pre&gt;


&lt;p&gt;to &lt;code&gt;config.py&lt;/code&gt;.  All set! In markdown, I can use
&lt;code&gt;\\( {math expression} \\)&lt;/code&gt; for inline math, and&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;\\[ {math expression} \\]
&lt;/pre&gt;


&lt;p&gt;for block display.  For other references to &lt;a href="https://www.mathjax.org/" title="MathJax"&gt;MathJax&lt;/a&gt;, see &lt;a href="https://mechowy.github.io/link/mathjax/" title="MathJax Reference Links"&gt;this link&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;GitHub Deploy&lt;/h4&gt;
&lt;p&gt;Admittedly, Git confuses me sometimes.  And the built-in command that Nikola offers is absolutely godsent.  It nicely push content to the master branch of your userpage repo, which is {github.username}.github.io, and keep source in the source branch.  &lt;/p&gt;
&lt;p&gt;Having had my empty &lt;code&gt;{github.username}.github.io&lt;/code&gt; repo ready on github, I have these in my &lt;code&gt;config.py&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;# DEPLOY_COMMANDS = {
#    'default': [
#        'git add .',
#        "git commit -am 'Update'",
#        'git push origin master',
#        'git subtree split --prefix output -b gh-pages',
#        'git push -f origin gh-pages:gh-pages',
#        'git branch -D gh-pages'
#    ]
#}

GITHUB_SOURCE_BRANCH = 'source'
GITHUB_DEPLOY_BRANCH = 'master'

GITHUB_REMOTE_NAME = 'origin'

GITHUB_COMMIT_SOURCE = True
&lt;/pre&gt;


&lt;p&gt;&lt;del&gt; I am honestly a little confused whether or not the &lt;code&gt;DEPLOY_COMMANDS&lt;/code&gt; is actually needed.  I looked into the github_deploy.py under the hood of Nikola, it seems the deploy commands are already predefined.  I need to further experiment whether the &lt;code&gt;nikola github_deploy&lt;/code&gt; would work without a &lt;code&gt;DEPLOY_COMMANDS&lt;/code&gt; defined in &lt;code&gt;config.py&lt;/code&gt;.  Will update when I am 200% certain. &lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Update: &lt;code&gt;nikola github_deploy&lt;/code&gt; IS indeed GOD-SENT.  Without having to define &lt;code&gt;DEPLOY_COMMANDS&lt;/code&gt;, it nicely does everything for us - push &lt;code&gt;output&lt;/code&gt; content to master, and source to source.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;That said&lt;/del&gt; Now, whenever I want to update content to my github page, I simply type:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola github_deploy
&lt;/pre&gt;


&lt;h4&gt;Others&lt;/h4&gt;
&lt;p&gt;For additional features, there are &lt;a href="https://github.com/getnikola/plugins" title="Nikola Plugins"&gt;plugins&lt;/a&gt; that could be installed.  There is also a &lt;a href="https://groups.google.com/forum/#!forum/nikola-discuss" title="Nikola Google Dicussion Group"&gt;Google Discussion Group for Nikola&lt;/a&gt;.  &lt;/p&gt;&lt;/div&gt;</description><category>github</category><category>github pages</category><category>Nikola</category><guid>https://chow1026.github.io/posts/nikola-setup/</guid><pubDate>Mon, 15 Aug 2016 03:32:11 GMT</pubDate></item><item><title>Hello World!</title><link>https://chow1026.github.io/posts/hello-world/</link><dc:creator>cHoWy</dc:creator><description>&lt;div&gt;&lt;p&gt;Hello! I am &lt;!--\\[ e^{i\pi} + 1 = 0 \\] --&gt;writing this post &lt;!--\\( e^{i\pi} + 1 = 0 \\) --&gt; we'll see how this works!&lt;/p&gt;
&lt;!--\\[ e^{i\pi} + 1 = 0 \\]--&gt;&lt;/div&gt;</description><category>hello-world</category><guid>https://chow1026.github.io/posts/hello-world/</guid><pubDate>Sat, 06 Aug 2016 13:36:10 GMT</pubDate></item></channel></rss>