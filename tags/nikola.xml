<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title> =^..^= MEH (Nikola)</title><link>https://chowy1026.github.io/</link><description></description><atom:link rel="self" type="application/rss+xml" href="https://chowy1026.github.io/tags/nikola.xml"></atom:link><language>en</language><lastBuildDate>Mon, 15 Aug 2016 07:11:26 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Setting Up Nikola, a Static Site Generator</title><link>https://chowy1026.github.io/posts/nikola-setup/</link><dc:creator>cHoWy</dc:creator><description>&lt;div&gt;&lt;p&gt;A while back, I started to look into static site generators for building my professional and personal blog site.  I had used &lt;a href="https://wordpress.org/" title="Wordpress"&gt;Wordpress&lt;/a&gt; long ago, but want to practice programming in Python.  Recently I tried out &lt;a href="https://medium.com/" title="Medium"&gt;Medium&lt;/a&gt;, but find it rather limiting when it comes to formatting content, and to organizing my posts.   &lt;/p&gt;
&lt;p&gt;I want to use the opportunity to explore what's new out there and get my hands dirty in programming again.  While researching, I stumble upon this site for static site generator - &lt;a href="https://www.staticgen.com/" title="StaticGen"&gt;StaticGen&lt;/a&gt;.  After testing out briefly with Pelican and Nikola, At last I decided to go with &lt;a href="https://getnikola.com/" title="Nikola"&gt;Nikola&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Nikola is rather lightweight, written with Python, supports contents written in markdown (my preferred way of writing content), and supports &lt;a href="https://www.mathjax.org/" title="MathJax"&gt;MathJax&lt;/a&gt; with a little tweaking.&lt;/p&gt;
&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;The initial installation is rather basic.  First I install Nikola using pip.  Note that I install the extras as well, so I don't have to worry about them later.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ pip install --upgrade &lt;span class="s2"&gt;"Nikola[extras]"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Then, I created a virtual environment and a project for this using  &lt;a href="https://virtualenv.pypa.io/en/stable/" title="Python VirtualEnv"&gt;&lt;code&gt;virtualevn&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://virtualenvwrapper.readthedocs.io/en/latest/" title="Python VirtualEnvWrapper"&gt;&lt;code&gt;virtualevnwrapper&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ mkproject -p /usr/local/bin/python3 nikola
$ workon nikola
&lt;/pre&gt;


&lt;p&gt;Then I was able to initialize a Nikola site.  &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola init &lt;span class="o"&gt;{&lt;/span&gt;site_name&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Voila! We have a site!  Nikola has neat built-in commands. Check them out with &lt;code&gt;nikola help&lt;/code&gt;.  For example, to create a new post, use the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola new_post &lt;span class="o"&gt;{&lt;/span&gt;post_name&lt;span class="o"&gt;}&lt;/span&gt;.md
&lt;/pre&gt;


&lt;p&gt;I like to keep the nikola server running as I go through the edit/preview cycles, I typed&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola auto -b
&lt;/pre&gt;


&lt;h4&gt;Configurations&lt;/h4&gt;
&lt;p&gt;I used most of the default settings in the &lt;code&gt;config.py&lt;/code&gt;, except for the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;# Category Settings #
CATEGORY_PATH = "categories"
CATEGORY_PREFIX = ""
CATEGORY_ALLOW_HIERARCHIES = True
CATEGORY_OUTPUT_FLAT_HIERARCHY = False
CATEGORY_PAGES_ARE_INDEXES = False

# Author Page #
ENABLE_AUTHOR_PAGES = False

# Archives Settings #
CREATE_MONTHLY_ARCHIVE = True
CREATE_DAILY_ARCHIVE = True
ARCHIVE_PATH = "archives"
ARCHIVE_FILENAME = "archives.html"

# FavIcons #
FAVICONS = (
    ("icon", "{path to favicon}", "64x64"),
    ("icon", "{path to favicon}", "512x512"),
)

# Hide Source Link #
SHOW_SOURCELINK = False
&lt;/pre&gt;


&lt;h4&gt;Organizing Content&lt;/h4&gt;
&lt;p&gt;Instead the built-in Category and Tag features, I am not quite satisfied with the way it organizes my content.  I prefer to organize my content a certain way.  So, in the &lt;code&gt;config.py&lt;/code&gt;, I made the following settings:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;POSTS = (
    ("posts/*.md", "posts", "post.tmpl"),
    ("course-notes/*.md", "course-notes", "post.tmpl"),
    ("links/*.md", "links", "post.tmpl"),
    ("books/*.md", "books", "post.tmpl"),
    ("movies-shows/*.md", "movies-shows", "post.tmpl"),
    ("music/*.md", "music", "post.tmpl"),
)
PAGES = (
    ("pages/*.md", "pages", "story.tmpl"),
)
&lt;/pre&gt;


&lt;p&gt;Although Nikola offers two content types - post and page, I figure I only use the post type (for now at least).  I am simply keeping &lt;code&gt;PAGES&lt;/code&gt; as is.   &lt;/p&gt;
&lt;p&gt;To add the corresponding content type to the navigation links,&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;NAVIGATION_LINKS = {
    DEFAULT_LANG: (
        ("/posts/index.html", "Articles"),
        ("/course-notes/index.html", "Course Notes"),
        ("/links/index.html", "Links"),
        ("/books/index.html", "Books"),
        ("/archives/archives.html", "Archives"),
        ("/tags.html", "Tags"),
    ),
}
&lt;/pre&gt;


&lt;h4&gt;Themes&lt;/h4&gt;
&lt;p&gt;Nikola's theme repo doesn't offer too extensive a choice. So I decided to make my own by following this very nicely written guide in &lt;a href="http://nikola.readthedocs.io/en/latest/creating-a-theme/" title="Creating a Nikola Theme"&gt;creating your own theme&lt;/a&gt;.  You may find &lt;a href="https://github.com/chowy1026/nikola-themes/tree/hyde/v7/hyde" title="Nikola Theme - Hyde"&gt;my theme here&lt;/a&gt;.  &lt;/p&gt;
&lt;h4&gt;Enabling MathJax&lt;/h4&gt;
&lt;p&gt;The steps to enable MathJax in Nikola are easy. First, add the following line to &lt;code&gt;templates\base_helper.tmpl&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;link rel="stylesheet" href="http://fonts.googleapis.com/css?family=PT+Sans:400,400italic,700|Abril+Fatface"&amp;gt;
&lt;/pre&gt;


&lt;p&gt;Then add&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;MATHJAX_CONFIG = """
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/x-mathjax-config"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        MathJax.Hub.Config({
            tex2jax: {
                inlineMath: [ ['$','$'], ["\\\(","\\\)"] ],
                displayMath: [ ['$$','$$'], ["\\\[","\\\]"] ],
                processEscapes: true
            },
            displayAlign: 'left', // Change this to 'center' to center equations.
            "HTML-CSS": {
                styles: {'.MathJax_Display': {"margin": 0}}
            }
        });
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/x-mathjax-config"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  MathJax.Hub.Queue(function() {
    // Fix &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt; tags after MathJax finishes running. This is a
    // hack to overcome a shortcoming of Markdown. Discussion at
    // https://github.com/mojombo/jekyll/issues/199
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &lt;span class="nt"&gt;&amp;lt; all.length&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="err"&gt;i&lt;/span&gt; &lt;span class="err"&gt;+=&lt;/span&gt; &lt;span class="err"&gt;1)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;all[i].SourceElement().parentNode.className&lt;/span&gt; &lt;span class="err"&gt;+=&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="err"&gt;has-jax';&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;});&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;/script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    """
&lt;/pre&gt;


&lt;p&gt;and this&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;HIDDEN_TAGS = ['mathjax']
&lt;/pre&gt;


&lt;p&gt;to &lt;code&gt;config.py&lt;/code&gt;.  All set! In markdown, I can use
&lt;code&gt;\\( {math expression} \\)&lt;/code&gt; for inline math, and&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;\\[ {math expression} \\]
&lt;/pre&gt;


&lt;p&gt;for block display.  For other references to &lt;a href="https://www.mathjax.org/" title="MathJax"&gt;MathJax&lt;/a&gt;, see &lt;a href="https://mechowy.github.io/link/mathjax/" title="MathJax Reference Links"&gt;this link&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;GitHub Deploy&lt;/h4&gt;
&lt;p&gt;Admittedly, Git confuses me sometimes.  And the built-in command that Nikola offers is absolutely godsent.  It nicely push content to the master branch of your userpage repo, which is {github.username}.github.io, and keep source in the source branch.  &lt;/p&gt;
&lt;p&gt;Having had my empty &lt;code&gt;{github.username}.github.io&lt;/code&gt; repo ready on github, I have these in my &lt;code&gt;config.py&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;# DEPLOY_COMMANDS = {
#    'default': [
#        'git add .',
#        "git commit -am 'Update'",
#        'git push origin master',
#        'git subtree split --prefix output -b gh-pages',
#        'git push -f origin gh-pages:gh-pages',
#        'git branch -D gh-pages'
#    ]
#}

GITHUB_SOURCE_BRANCH = 'source'
GITHUB_DEPLOY_BRANCH = 'master'

GITHUB_REMOTE_NAME = 'origin'

GITHUB_COMMIT_SOURCE = True
&lt;/pre&gt;


&lt;p&gt;&lt;del&gt; I am honestly a little confused whether or not the &lt;code&gt;DEPLOY_COMMANDS&lt;/code&gt; is actually needed.  I looked into the github_deploy.py under the hood of Nikola, it seems the deploy commands are already predefined.  I need to further experiment whether the &lt;code&gt;nikola github_deploy&lt;/code&gt; would work without a &lt;code&gt;DEPLOY_COMMANDS&lt;/code&gt; defined in &lt;code&gt;config.py&lt;/code&gt;.  Will update when I am 200% certain. &lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Update: &lt;code&gt;nikola github_deploy&lt;/code&gt; IS indeed GOD-SENT.  Without having to define &lt;code&gt;DEPLOY_COMMANDS&lt;/code&gt;, it nicely does everything for us - push &lt;code&gt;output&lt;/code&gt; content to master, and source to source.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;That said&lt;/del&gt; Now, whenever I want to update content to my github page, I simply type:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola github_deploy
&lt;/pre&gt;


&lt;h4&gt;Others&lt;/h4&gt;
&lt;p&gt;For additional features, there are &lt;a href="https://github.com/getnikola/plugins" title="Nikola Plugins"&gt;plugins&lt;/a&gt; that could be installed.  There is also a &lt;a href="https://groups.google.com/forum/#!forum/nikola-discuss" title="Nikola Google Dicussion Group"&gt;Google Discussion Group for Nikola&lt;/a&gt;.  &lt;/p&gt;&lt;/div&gt;</description><category>github</category><category>github pages</category><category>Nikola</category><guid>https://chowy1026.github.io/posts/nikola-setup/</guid><pubDate>Mon, 15 Aug 2016 03:32:11 GMT</pubDate></item><item><title>Helpful Links on Nikola</title><link>https://chowy1026.github.io/links/nikola/</link><dc:creator>cHoWy</dc:creator><description>&lt;div&gt;&lt;h3&gt;Primary References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://getnikola.com/" title="Nikola Homepage"&gt;Nikola Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nikola.readthedocs.io/en/latest/" title="Nikola Documentation"&gt;Nikola Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/nikola-discuss" title="Nikola Google Group"&gt;Nikola Google Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getnikola/nikola" title="Nikola Github"&gt;Nikola Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nikola.readthedocs.io/en/latest/creating-a-theme/" title="Theming Nikola"&gt;Theming Nikola&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nikola.readthedocs.io/en/latest/manual/#math" title="MathJax on Nikola"&gt;MathJax on Nikola&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sampathweb.com/posts/blogging-made-easy.html" title="GitHub DEPLOY_COMMANDS in Config.py"&gt;GitHub DEPLOY_COMMANDS in Config.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Other Notable References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://louistiao.me/posts/how-i-customized-my-nikola-powered-site/" title="Louis Tiao's Guide"&gt;Louis Tiao's Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>helpful-links</category><category>Nikola</category><guid>https://chowy1026.github.io/links/nikola/</guid><pubDate>Fri, 12 Aug 2016 02:31:52 GMT</pubDate></item></channel></rss>